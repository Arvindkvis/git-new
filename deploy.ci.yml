#########
# Setup #
#########

# dind runners
# image: docker:latest

# services:
#   - name: docker:dind
#     command: ["--mtu=1400"]

# Kubernetes runners
image: docker:18.09-dind

services:
  - name: docker:18.09-dind
    command: ["--mtu=1300"]

variables:
  DOCKER_DRIVER: overlay
  DOCKER_HOST: tcp://localhost:2375

before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - docker pull $CI_REGISTRY/tas/ansible/ansible/base
 
##########
# Stages #
##########
stages:
  - "Deploy"
 
##########
# Deploy #
##########

"Deploy CLM":
  stage: Deploy
  tags:
    #- alpha-prod
    #- boca-prod
    #- docker
    #- icboca
    #- oldboca
    #- boca
    - alpha
    #- london
  script:
    - docker run
      -v `pwd`:/etc/ansible/
      --add-host=federation.reedelsevier.com:138.12.12.62
      --env aws_username=$AWS_USERNAME
      --env aws_password=$AWS_PASSWORD
      --env aws_account=$AWS_ACCOUNT
      $CI_REGISTRY/tas/ansible/ansible/base
      ansible-playbook -i "$INSTANCES," deploy-clm.yml
      --extra-vars "
      pipeline_id=$CI_PIPELINE_ID
      aws_region=$AWS_REGION
      client=$CLIENT
      build_environment=$ENVIRONMENT
      clm_fqdn=$CLM_FQDN
      package=$PACKAGE
      vault_path=$VAULT_PATH
      vault_token=$VAULT_TOKEN
      init_db=$INIT_DB" -v
    - printf '\n\n' && echo "Deploy complete!" && printf '\n\n'
  # artifacts:
  #   untracked: true
  allow_failure: false
  only:
    variables:
      - $INSTANCES

#############
# Catch All #
#############
# This prevents a user running the pipeline without the correct variables.
# Force all users to launch via the schedules section
"ERROR":
  stage: "Deploy"
  script:
    - printf '\n\n' && echo "Unable to deploy!\n Please reference the read me. Required variables missing!" && printf '\n\n'
  except:
    refs:
      - pushes
      - merge_requests
    variables:
      - $INSTANCES